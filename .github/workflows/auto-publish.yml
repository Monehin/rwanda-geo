name: Auto Publish to NPM

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Manual version bump type'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  packages: write

jobs:
  auto-publish:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        
      - name: Build package
        run: npm run build:all
        
      - name: Determine version bump type
        id: version_bump
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "bump_type=${{ github.event.inputs.version_type }}" >> $GITHUB_OUTPUT
            echo "manual_trigger=true" >> $GITHUB_OUTPUT
          else
            # Get commit messages since last tag
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [[ -z "$LAST_TAG" ]]; then
              # No previous tags, check all commits
              COMMITS=$(git log --oneline)
            else
              # Get commits since last tag
              COMMITS=$(git log --oneline ${LAST_TAG}..HEAD)
            fi
            
            # Determine bump type based on commit messages
            if echo "$COMMITS" | grep -q "BREAKING CHANGE\|major:"; then
              echo "bump_type=major" >> $GITHUB_OUTPUT
            elif echo "$COMMITS" | grep -q "feat:\|feature:"; then
              echo "bump_type=minor" >> $GITHUB_OUTPUT
            else
              echo "bump_type=patch" >> $GITHUB_OUTPUT
            fi
            echo "manual_trigger=false" >> $GITHUB_OUTPUT
          fi
          
          echo "Version bump type: ${{ steps.version_bump.outputs.bump_type }}"
          
      - name: Check if version bump is needed
        id: check_changes
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Check if there are any changes since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [[ -z "$LAST_TAG" ]]; then
            echo "no_previous_tag=true" >> $GITHUB_OUTPUT
            echo "needs_bump=true" >> $GITHUB_OUTPUT
          else
            # Check if there are commits since last tag
            COMMITS_SINCE_TAG=$(git log --oneline ${LAST_TAG}..HEAD | wc -l)
            if [[ $COMMITS_SINCE_TAG -gt 0 ]]; then
              echo "needs_bump=true" >> $GITHUB_OUTPUT
            else
              echo "needs_bump=false" >> $GITHUB_OUTPUT
            fi
          fi
          
          echo "Current version: $CURRENT_VERSION"
          echo "Last tag: $LAST_TAG"
          echo "Needs bump: ${{ steps.check_changes.outputs.needs_bump }}"
          
      - name: Bump version
        if: steps.check_changes.outputs.needs_bump == 'true'
        run: |
          npm version ${{ steps.version_bump.outputs.bump_type }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "Bumped version to: $NEW_VERSION"
          
      - name: Build with new version
        if: steps.check_changes.outputs.needs_bump == 'true'
        run: npm run build:all
        
      - name: Publish to NPM
        if: steps.check_changes.outputs.needs_bump == 'true'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create Git tag and push
        if: steps.check_changes.outputs.needs_bump == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "Bump version to ${{ env.NEW_VERSION }} [skip ci]"
          git tag v${{ env.NEW_VERSION }}
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git push origin main
          git push origin v${{ env.NEW_VERSION }}
          
      - name: Skip publish (no changes)
        if: steps.check_changes.outputs.needs_bump == 'false'
        run: |
          echo "No changes detected since last tag. Skipping publish."
          echo "Current version: ${{ steps.check_changes.outputs.current_version }}"
          echo "Last tag: $(git describe --tags --abbrev=0 2>/dev/null || echo 'none')" 